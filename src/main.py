from google import genai
import json
import logging
from google.genai import types
import os

import requests
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# Configure logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler("app.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Load configuration
with open(os.path.join(os.getcwd(), "config.json"), "r", encoding="utf-8") as f:
    config = json.load(f)

TELEGRAM_BOT_TOKEN = config.get("telegram_bot_token")
API_KEY = config.get("api_key")
SYSTEM_PROMPT = config.get("system_prompt")

os.environ["HTTP_PROXY"] = config.get("http_proxy")
os.environ["HTTPS_PROXY"] = config.get("https_proxy")

client = genai.Client(api_key=API_KEY)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the /start command."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –Ω–∞ –Ø—Å–Ω—ã–π —è–∑—ã–∫."
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the /help command."""
    help_text = """–ü—Ä–∏–≤–µ—Ç! üëã 
 
–Ø ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∞ —è—Å–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫. –ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–¥–µ–ª–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –∏ –ª–µ–≥–∫–æ–π –¥–ª—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.  
 
–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å —É–ø—Ä–æ—Å—Ç–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ, –∏ —è –ø–æ–º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–ºüòä 
 
–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—â–µ –≤–º–µ—Å—Ç–µ!"""
    await update.message.reply_text(help_text)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle incoming messages."""
    user_message = update.message.text
    logger.info(f"Received message from {update.effective_user.id}: {user_message}")

    try:
        response = client.models.generate_content(
            model="gemini-2.0-flash",
            config=types.GenerateContentConfig(
                system_instruction=SYSTEM_PROMPT),
            contents=user_message
        )

        response_data = response.text
        print(response_data)
        ai_reply = response_data


    except requests.exceptions.RequestException as e:
        logger.error(f"Error communicating with AI API: {e}")
        ai_reply = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."

    # Send the AI's reply back to the user
    await update.message.reply_text(ai_reply)


async def on_startup(application):
    pass


def main():
    """Start the Telegram bot."""
    application = (
        ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).post_init(on_startup).build()
    )

    # Register handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )

    # Start the bot and run the startup coroutine
    logger.info("Bot is starting...")
    application.run_polling()


if __name__ == "__main__":
    main()
